import React, { useState } from 'react';
import './App.css';

function App() {
    const [prompt, setPrompt] = useState('');
    const [response, setResponse] = useState('');
    const [loading, setLoading] = useState(false);

    const handleAskAI = async () => {
        setLoading(true);
        try {
            const res = await fetch('/ask-ai', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ prompt })
            });
            const data = await res.json();
            setResponse(data.response || 'Error retrieving response.');
        } catch (error) {
            setResponse('Error connecting to AI service.');
        }
        setLoading(false);
    };

    return (
        <div className="App">
            <h1 className="title">AI Learning App</h1>
            <textarea
                className="input-box"
                value={prompt}
                onChange={(e) => setPrompt(e.target.value)}
                placeholder="Ask anything about AI..."
            />
            <button className="ask-button" onClick={handleAskAI} disabled={loading}>
                {loading ? 'Thinking...' : 'Ask AI'}
            </button>
            <div className="response-box">{response}</div>
        </div>
    );
}

export default App;

/* App.css */
.App {
    text-align: center;
    font-family: Arial, sans-serif;
    background-color: #f4f4f9;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 20px;
}

.title {
    font-size: 2rem;
    color: #6200ea;
    margin-bottom: 20px;
}

.input-box {
    width: 80%;
    max-width: 500px;
    height: 100px;
    padding: 10px;
    font-size: 1rem;
    border: 2px solid #6200ea;
    border-radius: 10px;
    outline: none;
    margin-bottom: 15px;
}

.ask-button {
    background-color: #6200ea;
    color: white;
    border: none;
    padding: 10px 20px;
    font-size: 1rem;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s;
}

.ask-button:hover {
    background-color: #3700b3;
}

.ask-button:disabled {
    background-color: #bdbdbd;
    cursor: not-allowed;
}

.response-box {
    width: 80%;
    max-width: 500px;
    background: white;
    padding: 15px;
    border-radius: 10px;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
    margin-top: 20px;
    word-wrap: break-word;
    text-align: left;
}

/* Service Worker for PWA */
self.addEventListener('install', (event) => {
    event.waitUntil(
        caches.open('ai-learning-cache-v1').then((cache) => {
            return cache.addAll([
                '/',
                '/index.html',
                '/App.css',
                '/App.js',
                '/manifest.json',
                '/icon-192x192.png',
                '/icon-512x512.png'
            ]);
        })
    );
});

self.addEventListener('fetch', (event) => {
    event.respondWith(
        caches.match(event.request).then((response) => {
            return response || fetch(event.request);
        })
    );
});

self.addEventListener('activate', (event) => {
    const cacheWhitelist = ['ai-learning-cache-v1'];
    event.waitUntil(
        caches.keys().then((cacheNames) => {
            return Promise.all(
                cacheNames.map((cacheName) => {
                    if (!cacheWhitelist.includes(cacheName)) {
                        return caches.delete(cacheName);
                    }
                })
            );
        })
    );
});
